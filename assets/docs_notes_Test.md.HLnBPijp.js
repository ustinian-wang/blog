import{_ as s,o as i,c as a,a5 as t}from"./chunks/framework.Cjg1mlEg.js";const n="/blog/assets/test_testCase.D_eh5TT8.gif",y=JSON.parse('{"title":"测试","description":"","frontmatter":{},"headers":[],"relativePath":"docs/notes/Test.md","filePath":"docs/notes/Test.md","lastUpdated":1723553927000}'),l={name:"docs/notes/Test.md"},e=t(`<h1 id="测试" tabindex="-1">测试 <a class="header-anchor" href="#测试" aria-label="Permalink to &quot;测试&quot;">​</a></h1><h2 id="背景介绍" tabindex="-1">背景介绍 <a class="header-anchor" href="#背景介绍" aria-label="Permalink to &quot;背景介绍&quot;">​</a></h2><p>日常开发中如何去保证代码质量，我们可能有如下几种方式：</p><ul><li>手工点点点</li><li>通过代码去测试代码，有且不限于 <ul><li>单元测试</li><li>集成测试</li><li>自动化测试</li><li>其他的一些方式</li></ul></li></ul><h2 id="前端项目在使用的测试" tabindex="-1">前端项目在使用的测试 <a class="header-anchor" href="#前端项目在使用的测试" aria-label="Permalink to &quot;前端项目在使用的测试&quot;">​</a></h2><ul><li>kit：工具函数引入jest做单元测试，验证入参和出参</li></ul><h2 id="当提交代码触发ci失败时-应当如何处理" tabindex="-1">当提交代码触发ci失败时，应当如何处理？ <a class="header-anchor" href="#当提交代码触发ci失败时-应当如何处理" aria-label="Permalink to &quot;当提交代码触发ci失败时，应当如何处理？&quot;">​</a></h2><ul><li>首先大概率是你的问题，因为前人是通过了case的。</li><li>先不要上来就去问测试用例的开发者要怎么处理，尝试自己解决。</li><li>先自行看下错误报告，看下你改动的方法为什么会失败。</li><li>大部分情况下不允许注释，跳过用例，因为出错说明其他的业务调用处也会跟着出错。</li></ul><h2 id="界面测试" tabindex="-1">界面测试 <a class="header-anchor" href="#界面测试" aria-label="Permalink to &quot;界面测试&quot;">​</a></h2><p>假设我们有一个数据如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//取值范围：[1,2,3]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//取值范围：[4, 5, 6]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>a有3种可能，b有3种可能，这里就有3x3=9种组合。如果你手动点点，那么就需要修改9次数据看表现，我们也可以通过@mall/kit提供<code>getCombinationOfObject</code>生成测试数据，</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getCombinationOfObject } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;@ustinian-wang/kit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getCombinationOfObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(testData, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        a: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        b: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    });</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.testData </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deepAssign</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( {}, testData, dataList[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] );</span></span></code></pre></div><p>测试表现： <img src="`+n+'" alt="test_testCase.gif"></p><p>更多<code>getCombinationOfObject</code>的详细用法，详见<a href="https://ustinian-wang.github.io/kit/global.html#getCombinationOfObject" target="_blank" rel="noreferrer">传送门</a></p>',15),h=[e];function p(k,r,d,E,o,c){return i(),a("div",{"data-pagefind-body":!0},h)}const u=s(l,[["render",p]]);export{y as __pageData,u as default};
