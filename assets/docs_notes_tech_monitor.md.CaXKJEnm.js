import{_ as a,o as e,c as t,a5 as o}from"./chunks/framework.Cjg1mlEg.js";const r="/blog/assets/Pasted_image_20240812093220.CMz4ZcIt.png",s="/blog/assets/Pasted_image_20240812093230.DGQ-EW0k.png",i="/blog/assets/Pasted_image_20240812093243.BpH29zvA.png",n="/blog/assets/Pasted_image_20240812093254.CHfob_iK.png",k=JSON.parse('{"title":"monitor","description":"","frontmatter":{},"headers":[],"relativePath":"docs/notes/tech_monitor.md","filePath":"docs/notes/tech_monitor.md","lastUpdated":1723426850000}'),p={name:"docs/notes/tech_monitor.md"},l=o('<h1 id="monitor" tabindex="-1">monitor <a class="header-anchor" href="#monitor" aria-label="Permalink to &quot;monitor&quot;">​</a></h1><h2 id="page-crash" tabindex="-1">page crash <a class="header-anchor" href="#page-crash" aria-label="Permalink to &quot;page crash&quot;">​</a></h2><h3 id="页面崩溃监控方案" tabindex="-1">页面崩溃监控方案 <a class="header-anchor" href="#页面崩溃监控方案" aria-label="Permalink to &quot;页面崩溃监控方案&quot;">​</a></h3><ul><li>Service worker 是一个注册在指定源和路径下的事件驱动 worker，Service Worker 有自己独立的工作线程，与网页区分开，网页崩溃了</li><li>Service Worker 一般情况下不会崩溃；Service Worker 生命周期一般要比网页还要长，可以用来监控网页的状态；</li><li>网页可以通过 navigator.serviceWorker.controller.postMessage API 向掌管自己的 SW 发送消息。</li></ul><h4 id="基于以上几点-可以实现一种基于心跳检测的监控方案" tabindex="-1">基于以上几点，可以实现一种基于心跳检测的监控方案： <a class="header-anchor" href="#基于以上几点-可以实现一种基于心跳检测的监控方案" aria-label="Permalink to &quot;基于以上几点，可以实现一种基于心跳检测的监控方案：&quot;">​</a></h4><ul><li><p>p1：网页加载后，通过 postMessage API 每 5s 给 sw 发送一个心跳，表示自己的在线，sw 将在线的网页登记下来，更新登记时间；</p></li><li><p>p2：网页在 beforeunload 时，通过 postMessage API 告知自己已经正常关闭，sw 将登记的网页清除；</p></li><li><p>p3：如果网页在运行的过程中 crash 了，sw 中的 running 状态将不会被清除，更新时间停留在奔溃前的最后一次心跳；</p></li><li><p>sw：Service Worker 每 10s 查看一遍登记中的网页，发现登记时间已经超出了一定时间（比如 15s）即可判定该网页 crash 了。</p></li></ul><h4 id="项目的实现细节" tabindex="-1">项目的实现细节： <a class="header-anchor" href="#项目的实现细节" aria-label="Permalink to &quot;项目的实现细节：&quot;">​</a></h4><p>由于 sw 的限制，只能放在所需监控域名的目录下。即单个业务使用可以将 sw.js 文件放在 xxx 域名的根目录下来监控网页是否崩溃。如下图所示：</p><p><img src="'+r+'" alt="[Pasted_image_20240812093220.png]"></p><blockquote><p>注意：公共组件为了实现各个业务都能监控上报，不可能在 hawkEye.src.js 文件中去注册 sw ，假如这样去注册了只能监控资源域名的状态，这样是没有意义的。</p></blockquote><h4 id="公共组件的实现细节" tabindex="-1">公共组件的实现细节： <a class="header-anchor" href="#公共组件的实现细节" aria-label="Permalink to &quot;公共组件的实现细节：&quot;">​</a></h4><p>在网页生成一个隐藏的 iframe，在 iframe 里注册 sw，之后网页直接通过 iframe 来通信。iframe 起到一个中转的作用。如下图所示：</p><p><img src="'+s+'" alt="[Pasted_image_20240812093230.png]"></p><h3 id="页面卡顿监控方案" tabindex="-1">页面卡顿监控方案 <a class="header-anchor" href="#页面卡顿监控方案" aria-label="Permalink to &quot;页面卡顿监控方案&quot;">​</a></h3><p>要监控网页的卡顿，我们必须从 fps 说起。fps 是来自视频或者游戏里的概念，即是每秒的帧数，代表视频或者游戏的流畅度，俗话说，就是“不卡”。</p><blockquote><p>那在前端开发领域，网页的 fps 是什么呢？</p></blockquote><p>网页内容在不断变化之中，网页的 FPS 是只浏览器在渲染这些变化时的帧率。帧率越高，用户感觉网页越流畅，反之则会感觉卡顿。</p><p>在 Chrome 中可以通过开发者工具查看网页的 fps：</p><p><img src="'+i+'" alt="[Pasted_image_20240812093243.png]"></p><p>注意，网页不是随时都需要，该工具看到的是每次更新是 fps 值。 最优的帧率是 60，即 16.7ms 左右渲染一次。</p><p>通过 Chrome 或者 Firfox 等的性能工具也可以查看浏览器的帧率：</p><p><img src="'+n+`" alt="[Pasted_image_20240812093254.png]"></p><blockquote><p>绿色的直方图即代表在页面重新绘制时的帧率，Frames 为每一帧渲染所花的时间。</p></blockquote><h4 id="如何计算网页的-fps" tabindex="-1">如何计算网页的 fps？ <a class="header-anchor" href="#如何计算网页的-fps" aria-label="Permalink to &quot;如何计算网页的 fps？&quot;">​</a></h4><p>通过 requestAnimationFrame API 来定时执行一些 JS 代码，如果浏览器卡顿，无法很好地保证渲染的频率，1s 中 frame 无法达到 60 帧，即可间接地反映浏览器的渲染帧率。</p><pre><code>var lastTime = performance.now();
var frame = 0;
var lastFameTime = performance.now();
var loop = function(time) {
	var now =  performance.now();
	var fs = (now - lastFameTime);
	lastFameTime = now;
	var fps = Math.round(1000/fs);
	frame++;
	if (now &gt; 1000 + lastTime) {
		var fps = Math.round( ( frame * 1000 ) / ( now - lastTime ) );
		frame = 0;    
		lastTime = now;    
	};           
	window.requestAnimationFrame(loop);   
}
</code></pre><h4 id="什么样的网页算卡顿" tabindex="-1">什么样的网页算卡顿？ <a class="header-anchor" href="#什么样的网页算卡顿" aria-label="Permalink to &quot;什么样的网页算卡顿？&quot;">​</a></h4><p>我们收集连续 10s 内每秒的 fps ，如果页面有 4 个帧没有超过 30 fps, 我们认为这个页面是卡顿的。</p>`,28),c=[l];function m(h,d,_,f,u,g){return e(),t("div",{"data-pagefind-body":!0},c)}const q=a(p,[["render",m]]);export{k as __pageData,q as default};
