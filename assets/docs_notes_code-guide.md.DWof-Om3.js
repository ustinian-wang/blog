import{_ as a,o as e,c as i,a5 as s}from"./chunks/framework.Cjg1mlEg.js";const g=JSON.parse('{"title":"code check","description":"","frontmatter":{},"headers":[],"relativePath":"docs/notes/code-guide.md","filePath":"docs/notes/code-guide.md","lastUpdated":1722876923000}'),t={name:"docs/notes/code-guide.md"},l=s(`<h1 id="code-check" tabindex="-1">code check <a class="header-anchor" href="#code-check" aria-label="Permalink to &quot;code check&quot;">​</a></h1><h2 id="强制" tabindex="-1">强制 <a class="header-anchor" href="#强制" aria-label="Permalink to &quot;强制&quot;">​</a></h2><ul><li>禁止在v-if、v-show使用常量true/false。</li><li>禁止url存在jsp链接</li><li>禁止component没有带上name属性</li><li>禁止data没有以function的方式声明</li><li>禁止template使用methods未注册的方法</li><li>禁止js调用的函数不存在</li><li>禁止vue组件没有添加script标签</li><li>禁止style标签@import scss文件，但没有声明lang=&#39;scss&#39;</li><li>禁止export出来的function没有写注释</li><li>禁止存在敏感关键词，例如<code>xxx</code></li><li>禁止把 v-if 和 v-for 同时用在同一个元素上。</li><li>禁止图片资源链接使用带域名的绝对路径</li><li>要求<code>JSON.parse</code>要加上try-catch</li><li>要求当你export-default一个函数时，函数名用小驼峰，文件名需要和函数名一致</li><li>要求当你export一个对象/类 时用大驼峰</li><li>要求在组件上总是必须用 key 配合 v-for，以便维护内部组件及其子树的状态</li><li>要求一个路径只import一次module；import说明：从同一个路径下import多行会使代码难以维护</li><li>要求if语句用大括号包裹一行或多行代码块</li><li>要求js中的字符串应该用单引号声明，而不是双引号</li><li>要求声明vue的data成员属性，避免赋值后没有双向绑定，如果是obj[xxx]=xxx的方式赋值，请改用this.$set设置值</li><li>要求 <ul><li>select的option要加上title</li><li>api必须要文档</li><li>调用顶层api，要加上isCurrentWindow的判断，避免被iframe嵌套</li><li>curd列表的情况下，add的流程在max时，需要终止</li><li>对于长key的读写，需要用getter和setter处理</li><li>一个开关对于后端其他功能有依赖，需要后端控制返回，而不是前端写逻辑判断</li><li>复杂数据的保存，应在入库前做一次检查</li><li>任何方法的修改，都要经受住任意参数的破坏性测试</li><li>使用第三方资源开发功能，要兼容当前域名的csp设置</li><li>外部服务接口有错误码时，要对所有错误码做前端处理</li><li>对于vuex被引入但是没有用到的数据，需要ast</li><li>不同组件还是解耦开</li><li>对于错误的判断，用错误码而不是msg</li><li>mac对于高频请求的接口，如果url一直一样，会缓存，这个时候要加上时间戳</li><li>业务的css层级应保持一致</li><li>jpg格式不可以等同png</li></ul></li></ul><h2 id="推荐" tabindex="-1">推荐 <a class="header-anchor" href="#推荐" aria-label="Permalink to &quot;推荐&quot;">​</a></h2><ul><li>禁止残留log在代码中</li><li>禁止进行金额计算、拼接，问题表达式，请改成后端输出汇总后的金额字段</li><li>禁止template使用了复杂的表达式</li><li>要求函数参数不可以超过3个</li><li>要求删除未使用的方法</li></ul><h2 id="代码质量检测" tabindex="-1">代码质量检测 <a class="header-anchor" href="#代码质量检测" aria-label="Permalink to &quot;代码质量检测&quot;">​</a></h2><h3 id="husky" tabindex="-1">husky: <a class="header-anchor" href="#husky" aria-label="Permalink to &quot;husky:&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>yarn add husky -D</span></span>
<span class="line"><span>npx husky-init</span></span>
<span class="line"><span>yarn</span></span></code></pre></div><h3 id="prettier" tabindex="-1">prettier: <a class="header-anchor" href="#prettier" aria-label="Permalink to &quot;prettier:&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>yarn add -d prettier</span></span></code></pre></div><p>添加<code>.prettierrc.js</code>文件，配置pretier规则。</p><h3 id="eslint" tabindex="-1">eslint: <a class="header-anchor" href="#eslint" aria-label="Permalink to &quot;eslint:&quot;">​</a></h3><p>1、安装依赖：考虑本机可能node版本较低，安装较新版的eslint可能会存在node版本过低的问题。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>yarn add eslint@6.7.2 -D</span></span>
<span class="line"><span></span></span>
<span class="line"><span>yarn add eslint-plugin-vue@6.2.2 -D</span></span>
<span class="line"><span></span></span>
<span class="line"><span>yarn add babel-eslint@10.1.0 -D</span></span>
<span class="line"><span></span></span>
<span class="line"><span>yarn add lint-staged@10.5.4 -D</span></span></code></pre></div><p>2、添加<code>.eslintrc.js</code>和<code>.eslintignore</code>文件，详见文件内容</p><p>3、<code>package.json</code>中添加：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&quot;lint-staged&quot;: {</span></span>
<span class="line"><span>    &quot;./src/**/*.{js,vue}&quot;: [</span></span>
<span class="line"><span>        &quot;eslint --cache --fix&quot;,</span></span>
<span class="line"><span>        &quot;prettier --write&quot;</span></span>
<span class="line"><span>    ]</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>4、在 <code>.husky</code> 文件夹下找到刚刚安装依赖生成好的 <code>pre-commit</code> 文件，添加 <code>yarn lint-staged</code></p><ol start="5"><li>eslint限制vue文件生命周期编写顺序，具体可见<code>.eslintrc.js</code>里的<code>vue/order-in-components</code></li></ol><h3 id="commitlint" tabindex="-1">commitlint: <a class="header-anchor" href="#commitlint" aria-label="Permalink to &quot;commitlint:&quot;">​</a></h3><p>1、安装依赖： <code>yarn add -d @commitlint/config-conventional @commitlint/cli</code></p><p>2、在husky已安装且激活的前提下，add hook： <code>yarn husky add .husky/commit-msg &#39;npx --no -- commitlint --edit &quot;$1&quot;&#39;</code> 在.husky目录下会初始化commit-msg文件</p><p>3、新增<code>commitlint.config.js</code>文件, 详见文件内容。</p><p>4、测试： <code>git add . </code> 暂存文件 <code>git commit -m &quot;test commitlint&quot;</code>（不通过） <code>git commit -m &quot;test:commitlint&quot;</code>（不通过） <code> git commit -m &quot;test: commitlint&quot;</code>（通过）</p><h3 id="ast" tabindex="-1">AST <a class="header-anchor" href="#ast" aria-label="Permalink to &quot;AST&quot;">​</a></h3><p>利用babel解析代码为AST，检查AST的节点是否符合上述规范，从而进行拦截，触发点位于<code>husky</code>的钩子</p>`,26),n=[l];function o(c,d,p,r,h,u){return e(),i("div",{"data-pagefind-body":!0},n)}const b=a(t,[["render",o]]);export{g as __pageData,b as default};
