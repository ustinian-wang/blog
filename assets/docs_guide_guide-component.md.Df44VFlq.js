import{_ as s,o as a,c as i,a5 as e}from"./chunks/framework.Cjg1mlEg.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"docs/guide/guide-component.md","filePath":"docs/guide/guide-component.md","lastUpdated":1724652049000}'),l={name:"docs/guide/guide-component.md"},t=e(`<h2 id="什么是组件库" tabindex="-1">什么是组件库 <a class="header-anchor" href="#什么是组件库" aria-label="Permalink to &quot;什么是组件库&quot;">​</a></h2><p>多个项目下有大量的重复代码，为了提高代码的复用性，减少重复代码的编写，我们将一些常用的样式，组件抽离出来，形成了组件库</p><h2 id="初始化" tabindex="-1">初始化 <a class="header-anchor" href="#初始化" aria-label="Permalink to &quot;初始化&quot;">​</a></h2><p>有的组件库，可能内置了请求逻辑，他对请求的上下文可能有公共数据依赖，像这种就需要在引入的时候，调用方法进行初始化</p><h2 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h2><p><strong>组件库的迭代，请严格按照如下规范进行组件扩展、样式定制等工作。</strong></p><h3 id="概念介绍" tabindex="-1">概念介绍 <a class="header-anchor" href="#概念介绍" aria-label="Permalink to &quot;概念介绍&quot;">​</a></h3><ul><li><p><code>CamelCase</code>：</p><p>驼峰命名法，在这种命名风格中，多个单词连接在一起，每个单词的首字母大写，没有使用分隔符。例如，a-b-c-d 的驼峰命名为 ABCD。<br> 驼峰命名法通常用于变量名、函数名、类名等标识符的命名。它提供了更好的可读性和可维护性，尤其在编程语言中经常使用。</p></li><li><p><code>kebab-case</code>：</p><p>这种命名风格通常被称为kebab-case（短横线连字符风格）或者hyphenated-lowercase（连字符小写风格）。在这种命名风格中，多个单词之间用连字符（-）分隔，所有字母都是小写的。它被广泛应用于HTML、CSS和JavaScript等前端开发中，以提高代码的可读性和一致性。</p></li></ul><h3 id="组件创建" tabindex="-1">组件创建 <a class="header-anchor" href="#组件创建" aria-label="Permalink to &quot;组件创建&quot;">​</a></h3><p>使用<code>CamelCase</code>，例如<code>PersonalDetails.vue</code>，即首字母大写,方便后在JavaScript上下文中引入，因为js变量命名不支持<code>kebab-case</code></p><h3 id="组件注册" tabindex="-1">组件注册 <a class="header-anchor" href="#组件注册" aria-label="Permalink to &quot;组件注册&quot;">​</a></h3><h4 id="全局注册" tabindex="-1">全局注册 <a class="header-anchor" href="#全局注册" aria-label="Permalink to &quot;全局注册&quot;">​</a></h4><p>使用<code>kebab-case</code>，例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">components</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fa-mall-personal-details&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, PersonalDetails )</span></span></code></pre></div><h4 id="局部注册" tabindex="-1">局部注册 <a class="header-anchor" href="#局部注册" aria-label="Permalink to &quot;局部注册&quot;">​</a></h4><ul><li><p>关于命名引起的组件解析失败的原因：</p><ul><li><p>xxx_view.html等jsp使用场景下：但由于原生html不支持大小写， <code>CamelCase</code>不生效，而<code>kebab-case</code><br> 则正常渲染，因为浏览器会将<code>PersonalDetails</code>解析成<code>personaldetails</code></p><ul><li>vue的template场景下：由于html经由Vue解析而非浏览器，故此<code>CamelCase</code>和<code>kebab-case</code>都会生效</li></ul></li></ul></li><li><p>场景1(<strong>推荐</strong>)：使用CamelCase，这样少了一个<code>personal-details</code>和<code>PersonalDetails</code>转换的过程，包括后续检索代码都比较方便</p></li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PersonalDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">PersonalDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PersonalDetails </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./PersonalDetails.vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    components: {        PersonalDetails    }}  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>场景2: 使用<code>kebab-case</code></li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;            </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">personal-details</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">personal-details</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PersonalDetails </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./PersonalDetails.vue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	components: {            </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">		&#39;personal-details&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: PersonalDetails        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="ant-design-vue" tabindex="-1">ant-design-vue <a class="header-anchor" href="#ant-design-vue" aria-label="Permalink to &quot;ant-design-vue&quot;">​</a></h3><p>如果你要基于ant二次封装，那么它本身的使用规范如下</p><ul><li>组件名称: 以<code>a-xxxxx</code>开头</li><li>类名: 以<code>a-xxx</code>开头</li></ul><h3 id="业务组件" tabindex="-1">业务组件 <a class="header-anchor" href="#业务组件" aria-label="Permalink to &quot;业务组件&quot;">​</a></h3><blockquote><p>ma: 商城前端的命名简称，即my frontend</p></blockquote><ul><li>组件名称：以<code>.MaXXXX</code>开头</li><li>类名：以<code>.ma_XXX</code>开头</li><li>自定义图标：以<code>Ma</code>开头，举个例子，假设ant内置了delete图标DeleteOutlined，这个时候我们新增另外一个版本的delete图标，可以考虑如下命名： <ul><li>MaDeleteOutlined</li><li>MaDeleteV2Outlined</li></ul></li></ul><h3 id="api" tabindex="-1">Api <a class="header-anchor" href="#api" aria-label="Permalink to &quot;Api&quot;">​</a></h3><blockquote><p>提供了一个$ant单体对外暴露方法给外界使用</p></blockquote><h2 id="docs" tabindex="-1">Docs <a class="header-anchor" href="#docs" aria-label="Permalink to &quot;Docs&quot;">​</a></h2><ul><li>component1</li><li>component2</li></ul>`,29),n=[t];function h(p,k,d,o,r,E){return a(),i("div",{"data-pagefind-body":!0},n)}const u=s(l,[["render",h]]);export{g as __pageData,u as default};
